
.. module:: psoap

.. _scripts:

Scripts
=======

The following scripts are made available on your command-line by the
``PSOAP`` package. Run them from your command-line prompt with the
``--help`` flag to learn more about them.

e.g.

::

    $psoap-initialize --help

The following outputs are autogenerated from an IPython notebook, so
that's why there is a ``!`` instead of a ``$`` preceeding each script
name.

Initialization
--------------

.. code:: python

    !psoap-initialize --help


.. parsed-literal::

    usage: psoap-initialize [-h] [--check] [--model {SB1,SB2,ST1,ST2,ST3}]
    
    Initialize a new directory with the necessary configuration scripts to run
    PSOAP.
    
    optional arguments:
      -h, --help            show this help message and exit
      --check               Check whether the package was installed and the
                            scripts were linked properly.
      --model {SB1,SB2,ST1,ST2,ST3}
                            Which type of model to use.


.. code:: python

    !psoap-hdf5-exploder --help


.. parsed-literal::

    usage: psoap-hdf5-exploder [-h] [--orders [ORDERS [ORDERS ...]]] [--SNR]
                               [--topo] [--spacing SPACING]
    
    Make summary plots for a full HDF5 dataset.
    
    optional arguments:
      -h, --help            show this help message and exit
      --orders [ORDERS [ORDERS ...]]
                            Which orders to plot (indexed from 0). By default, all
                            orders are plotted. You can add more than one order in
                            a spaced list, e.g., --orders 22 23 24 but not
                            --orders=22,23,24
      --SNR                 Plot spectra in order of highest SNR first, instead of
                            by date. Default is by date.
      --topo                Plot spectra in topocentric frame instead of
                            barycentric frame. Default is barycentric frame.
      --spacing SPACING     Multiply the default vertical spacing between epoch
                            spectra by this value, in order to increase or
                            decrease the vertical spread.


.. code:: python

    !psoap-generate-chunks --help


.. parsed-literal::

    usage: psoap-generate-chunks [-h] [--pixels PIXELS] [--overlap OVERLAP]
                                 [--start START] [--end END]
    
    Auto-generate a chunks.dat file, which can be later edited by hand.
    
    optional arguments:
      -h, --help         show this help message and exit
      --pixels PIXELS    Roughly how many pixels per epoch should we have in each
                         chunk?
      --overlap OVERLAP  How many pixels of overlap to aim for between adjacent
                         chunks.
      --start START      Starting wavelength (AA).
      --end END          Ending wavelength (AA).


.. code:: python

    !psoap-process-chunks --help


.. parsed-literal::

    usage: psoap-process-chunks [-h] [--plot]
    
    Use the demarcated chunks in the chunks.dat to segment the dataset into new
    HDF5 chunks.
    
    optional arguments:
      -h, --help  show this help message and exit
      --plot      Make plots of the partitioned chunks.


.. code:: python

    !psoap-generate-masks --help


.. parsed-literal::

    usage: psoap-generate-masks [-h] [--sigma SIGMA]
    
    Auto-generate a comprehensive masks.dat file, which can later be edited by
    hand if necessary.
    
    optional arguments:
      -h, --help     show this help message and exit
      --sigma SIGMA  Flag a single epoch of a chunk if it contains a deviant above
                     this level.


.. code:: python

    !psoap-process-masks --help


.. parsed-literal::

    usage: psoap-process-masks [-h] [--plot]
    
    Apply the masks contained in the masks.dat file to the list of chunks
    contained in chunks.dat
    
    optional arguments:
      -h, --help  show this help message and exit
      --plot      Make plots of the applied masks.


Reconstruction
--------------

.. code:: python

    !psoap-reconstruct --help


.. parsed-literal::

    usage: psoap-reconstruct [-h] [--reconstruct {mean,Sigma}] [--draws DRAWS]
                             [--plot] [--chunk [CHUNK [CHUNK ...]]]
    
    Perform various tasks related to calculating the posterior predictive means
    and covariances of the Gaussian process spectral models, conditional on the
    orbital parameters and Gaussian process hyperparameters. A default call with
    no flags will not perform any action, so please choose the appropriate flags.
    There are three main functions that can be performed by this script (1):
    calculating the posterior predictive mean and covariance, and saving these to
    disk (2): taking samples from this distribution, and (3): plotting any of the
    data products created in the previous steps.
    
    optional arguments:
      -h, --help            show this help message and exit
      --reconstruct {mean,Sigma}
                            If 'mean', compute the posterior predictive mean and
                            variance of the individual spectral components. If
                            'Sigma', additionally compute the full cross-
                            covariance matrix.
      --draws DRAWS         In addition to plotting the mean GP, plot several
                            draws of the GP to show the scatter in predictions of
                            the covariance matrices on disk. Must already have
                            executed the reconstruction phase to include at least
                            one covariance matrix.
      --plot                Plot the chunks using all of the reconstructed data
                            and (optionally) draws already on disk.
      --chunk [CHUNK [CHUNK ...]]
                            Limit the reconstruction or plots to this specific
                            chunk (or list of chunks in a spaced list, e.g.,
                            --chunk 1 2 3 but not --chunk=1,2,3).


Sampling
--------

The following scripts are used in sampling the posterior distribution.

.. code:: python

    !psoap-sample --help


.. parsed-literal::

    usage: psoap-sample [-h] [--debug] run_index
    
    Sample the distribution across multiple chunks.
    
    positional arguments:
      run_index   Which output subdirectory to save this particular run, in the
                  case you may be running multiple concurrently.
    
    optional arguments:
      -h, --help  show this help message and exit
      --debug     Print out debug commands to log.log


.. code:: python

    !psoap-sample-serial --help


.. parsed-literal::

    You need to copy a config.yaml file to this directory, and then edit the values to your particular case.
    Traceback (most recent call last):
      File "/home/ian/.build/anaconda/bin/psoap-sample-serial", line 11, in <module>
        load_entry_point('psoap==0.2.0', 'console_scripts', 'psoap-sample-serial')()
      File "/home/ian/.build/anaconda/lib/python3.6/site-packages/pkg_resources/__init__.py", line 570, in load_entry_point
        return get_distribution(dist).load_entry_point(group, name)
      File "/home/ian/.build/anaconda/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2751, in load_entry_point
        return ep.load()
      File "/home/ian/.build/anaconda/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2405, in load
        return self.resolve()
      File "/home/ian/.build/anaconda/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2411, in resolve
        module = __import__(self.module_name, fromlist=['__name__'], level=0)
      File "/home/ian/.build/anaconda/lib/python3.6/site-packages/psoap-0.2.0-py3.6-linux-x86_64.egg/psoap/scripts/sample_serial.py", line 33, in <module>
        f = open("config.yaml")
    FileNotFoundError: [Errno 2] No such file or directory: 'config.yaml'


.. code:: python

    !psoap-plot-samples --help


.. parsed-literal::

    usage: psoap-plot-samples [-h] [--burn BURN] [--config CONFIG] [--tri]
                              [--interactive] [--cov]
    
    Measure statistics across multiple chains.
    
    optional arguments:
      -h, --help       show this help message and exit
      --burn BURN      How many samples to discard from the beginning of the chain
                       for burn in.
      --config CONFIG  name of the config file used for the run.
      --tri            Plot the triangle too.
      --interactive    Pop up the walker window so that you can zoom around.
      --cov            Estimate the optimal covariance to tune MH jumps.


.. code:: python

    !psoap-gelman-rubin --help


.. parsed-literal::

    usage: psoap-gelman-rubin [-h] [--burn BURN] glob
    
    Measure statistics across multiple chains.
    
    positional arguments:
      glob         Do something on this glob. Must be given as a quoted expression
                   to avoid shell expansion.
    
    optional arguments:
      -h, --help   show this help message and exit
      --burn BURN  How many samples to discard from the beginning of the chain for
                   burn in.

